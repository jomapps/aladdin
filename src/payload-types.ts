/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    projects: Project;
    episodes: Episode;
    conversations: Conversation;
    workflows: Workflow;
    'activity-logs': ActivityLog;
    'export-jobs': ExportJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    projects: ProjectsSelect<false> | ProjectsSelect<true>;
    episodes: EpisodesSelect<false> | EpisodesSelect<true>;
    conversations: ConversationsSelect<false> | ConversationsSelect<true>;
    workflows: WorkflowsSelect<false> | WorkflowsSelect<true>;
    'activity-logs': ActivityLogsSelect<false> | ActivityLogsSelect<true>;
    'export-jobs': ExportJobsSelect<false> | ExportJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  /**
   * Project ID reference
   */
  project: string;
  mediaType?:
    | (
        | 'style_reference'
        | 'character_design'
        | 'environment_design'
        | 'concept_art'
        | 'storyboard'
        | 'video_segment'
        | 'audio_clip'
        | 'voice_profile'
        | 'music_track'
        | 'sound_effect'
        | 'final_video'
      )
    | null;
  /**
   * Whether this media was generated by an AI agent
   */
  agentGenerated?: boolean | null;
  generationMetadata?: {
    /**
     * ID of the agent that generated this media
     */
    agentId?: string | null;
    /**
     * Prompt used for generation
     */
    promptUsed?: string | null;
    /**
     * Version of the AI model used
     */
    modelVersion?: string | null;
    generationTime?: string | null;
    /**
     * Background task ID for tracking
     */
    taskId?: string | null;
  };
  /**
   * Jina v4 multimodal embedding vector
   */
  embedding?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Human or AI-generated description of the media
   */
  description?: string | null;
  /**
   * Array of tags for categorization
   */
  tags?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  relatedElements?: {
    /**
     * Character IDs featured in this media
     */
    characters?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    /**
     * Episode number if applicable
     */
    episode?: number | null;
    /**
     * Scene identifier if applicable
     */
    scene?: string | null;
    /**
     * Timestamp in seconds for video segments
     */
    timestamp?: number | null;
  };
  technicalData?: {
    /**
     * Duration in seconds for audio/video
     */
    duration?: number | null;
    /**
     * Resolution (e.g., 1920x1080)
     */
    resolution?: string | null;
    /**
     * Frames per second
     */
    fps?: number | null;
    /**
     * Audio sample rate in Hz
     */
    sampleRate?: number | null;
  };
  /**
   * Version number for iterative improvements
   */
  version?: number | null;
  status?: ('active' | 'draft' | 'archived' | 'processing' | 'failed') | null;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects".
 */
export interface Project {
  id: string;
  name: string;
  /**
   * Auto-generated from name (URL-safe)
   */
  slug: string;
  type?: ('movie' | 'series') | null;
  /**
   * For movies
   */
  targetLength?: number | null;
  /**
   * For series
   */
  targetEpisodes?: number | null;
  genre?:
    | {
        genre?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * One-sentence pitch
   */
  logline?: string | null;
  synopsis?: string | null;
  targetAudience?: string | null;
  /**
   * e.g., PG-13, R, TV-MA
   */
  contentRating?: string | null;
  /**
   * Original concept/pitch
   */
  initialIdea?: string | null;
  storyPremise?: string | null;
  themes?:
    | {
        theme?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * e.g., dark, comedic, dramatic
   */
  tone?: string | null;
  phase?: ('expansion' | 'compacting' | 'complete') | null;
  status?: ('active' | 'paused' | 'archived' | 'complete') | null;
  /**
   * 0-100
   */
  expansionProgress?: number | null;
  /**
   * 0-100
   */
  compactingProgress?: number | null;
  /**
   * 0-1 scale
   */
  overallQuality?: number | null;
  qualityBreakdown?: {
    story?: number | null;
    characters?: number | null;
    visuals?: number | null;
    technical?: number | null;
  };
  /**
   * Project creator/owner
   */
  owner: string | User;
  team?:
    | {
        user: string | User;
        role: 'owner' | 'editor' | 'collaborator' | 'viewer' | 'producer' | 'director' | 'writer';
        permissions?:
          | {
              permission?: string | null;
              id?: string | null;
            }[]
          | null;
        addedBy?: (string | null) | User;
        addedAt?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Set if this project was cloned from another
   */
  clonedFrom?: {
    projectId?: (string | null) | Project;
    clonedAt?: string | null;
    clonedBy?: (string | null) | User;
  };
  settings?: {
    brainValidationRequired?: boolean | null;
    minQualityThreshold?: number | null;
    autoGenerateImages?: boolean | null;
    /**
     * e.g., RunwayML, Pika Labs
     */
    videoGenerationProvider?: string | null;
    maxBudget?: number | null;
  };
  /**
   * Auto-generated: open_[slug]
   */
  openDatabaseName: string;
  /**
   * List of created collections in open database
   */
  dynamicCollections?:
    | {
        collection?: string | null;
        id?: string | null;
      }[]
    | null;
  tags?:
    | {
        tag?: string | null;
        id?: string | null;
      }[]
    | null;
  coverImage?: (string | null) | Media;
  isPublic?: boolean | null;
  /**
   * Auto-updated on activity
   */
  lastActivityAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "episodes".
 */
export interface Episode {
  id: string;
  name: string;
  /**
   * Parent project/series
   */
  project: string | Project;
  episodeNumber: number;
  /**
   * Optional season number
   */
  seasonNumber?: number | null;
  /**
   * Official episode title
   */
  title?: string | null;
  /**
   * One-sentence summary
   */
  logline?: string | null;
  /**
   * Full episode synopsis
   */
  synopsis?: string | null;
  /**
   * Expected runtime
   */
  targetLength?: number | null;
  status?: ('outlined' | 'scripted' | 'storyboarded' | 'generated' | 'complete') | null;
  /**
   * 0-1 scale
   */
  qualityRating?: number | null;
  /**
   * Episode act breakdown
   */
  actStructure?:
    | {
        actNumber: number;
        description?: string | null;
        /**
         * Number of scenes in this act
         */
        sceneCount?: number | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "conversations".
 */
export interface Conversation {
  id: string;
  /**
   * Descriptive name for this conversation
   */
  name: string;
  /**
   * Associated project (optional)
   */
  project?: (string | null) | Project;
  /**
   * Conversation owner
   */
  user?: (string | null) | User;
  /**
   * Conversation message history
   */
  messages?:
    | {
        /**
         * Unique message identifier
         */
        id: string;
        role: 'user' | 'assistant' | 'system';
        content: string;
        timestamp: string;
        /**
         * ID of the agent that generated this message
         */
        agentId?: string | null;
      }[]
    | null;
  status?: ('active' | 'archived') | null;
  /**
   * Timestamp of last message
   */
  lastMessageAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "workflows".
 */
export interface Workflow {
  id: string;
  /**
   * Descriptive workflow name
   */
  name: string;
  /**
   * Associated project
   */
  project: string | Project;
  /**
   * Current production phase
   */
  currentPhase?: ('expansion' | 'compacting' | 'complete') | null;
  /**
   * Quality checkpoints and thresholds
   */
  qualityGates?:
    | {
        name: string;
        /**
         * 0-1 scale, minimum quality required to pass
         */
        threshold: number;
        /**
         * Whether this gate has been passed
         */
        passed?: boolean | null;
        /**
         * When this gate was last evaluated
         */
        evaluatedAt?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activity-logs".
 */
export interface ActivityLog {
  id: string;
  project: string | Project;
  user: string | User;
  action:
    | 'project.created'
    | 'project.updated'
    | 'project.deleted'
    | 'content.created'
    | 'content.updated'
    | 'content.deleted'
    | 'export.started'
    | 'export.completed'
    | 'team.member.added'
    | 'team.member.removed'
    | 'team.role.changed'
    | 'clone.created'
    | 'media.uploaded';
  /**
   * Type of entity affected (e.g., character, scene)
   */
  entityType?: string | null;
  /**
   * ID of the affected entity
   */
  entityId?: string | null;
  /**
   * Additional context about the action
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  timestamp: string;
  /**
   * User IP address
   */
  ipAddress?: string | null;
  /**
   * Browser user agent
   */
  userAgent?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "export-jobs".
 */
export interface ExportJob {
  id: string;
  jobId: string;
  project: string | Project;
  user: string | User;
  /**
   * ID of the video being exported
   */
  videoId: string;
  format: 'mp4' | 'webm' | 'mov';
  quality: 'low' | 'medium' | 'high' | 'ultra';
  /**
   * e.g., 1920x1080
   */
  resolution: string;
  /**
   * Frames per second
   */
  fps: number;
  status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled';
  progress: number;
  /**
   * URL of the exported file
   */
  outputUrl?: string | null;
  /**
   * File size in bytes
   */
  outputSize?: number | null;
  /**
   * Error details if job failed
   */
  errorMessage?: string | null;
  /**
   * Additional export options
   */
  options?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  startedAt?: string | null;
  completedAt?: string | null;
  /**
   * Time taken to complete export
   */
  processingTime?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'projects';
        value: string | Project;
      } | null)
    | ({
        relationTo: 'episodes';
        value: string | Episode;
      } | null)
    | ({
        relationTo: 'conversations';
        value: string | Conversation;
      } | null)
    | ({
        relationTo: 'workflows';
        value: string | Workflow;
      } | null)
    | ({
        relationTo: 'activity-logs';
        value: string | ActivityLog;
      } | null)
    | ({
        relationTo: 'export-jobs';
        value: string | ExportJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  project?: T;
  mediaType?: T;
  agentGenerated?: T;
  generationMetadata?:
    | T
    | {
        agentId?: T;
        promptUsed?: T;
        modelVersion?: T;
        generationTime?: T;
        taskId?: T;
      };
  embedding?: T;
  description?: T;
  tags?: T;
  relatedElements?:
    | T
    | {
        characters?: T;
        episode?: T;
        scene?: T;
        timestamp?: T;
      };
  technicalData?:
    | T
    | {
        duration?: T;
        resolution?: T;
        fps?: T;
        sampleRate?: T;
      };
  version?: T;
  status?: T;
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects_select".
 */
export interface ProjectsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  type?: T;
  targetLength?: T;
  targetEpisodes?: T;
  genre?:
    | T
    | {
        genre?: T;
        id?: T;
      };
  logline?: T;
  synopsis?: T;
  targetAudience?: T;
  contentRating?: T;
  initialIdea?: T;
  storyPremise?: T;
  themes?:
    | T
    | {
        theme?: T;
        id?: T;
      };
  tone?: T;
  phase?: T;
  status?: T;
  expansionProgress?: T;
  compactingProgress?: T;
  overallQuality?: T;
  qualityBreakdown?:
    | T
    | {
        story?: T;
        characters?: T;
        visuals?: T;
        technical?: T;
      };
  owner?: T;
  team?:
    | T
    | {
        user?: T;
        role?: T;
        permissions?:
          | T
          | {
              permission?: T;
              id?: T;
            };
        addedBy?: T;
        addedAt?: T;
        id?: T;
      };
  clonedFrom?:
    | T
    | {
        projectId?: T;
        clonedAt?: T;
        clonedBy?: T;
      };
  settings?:
    | T
    | {
        brainValidationRequired?: T;
        minQualityThreshold?: T;
        autoGenerateImages?: T;
        videoGenerationProvider?: T;
        maxBudget?: T;
      };
  openDatabaseName?: T;
  dynamicCollections?:
    | T
    | {
        collection?: T;
        id?: T;
      };
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  coverImage?: T;
  isPublic?: T;
  lastActivityAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "episodes_select".
 */
export interface EpisodesSelect<T extends boolean = true> {
  name?: T;
  project?: T;
  episodeNumber?: T;
  seasonNumber?: T;
  title?: T;
  logline?: T;
  synopsis?: T;
  targetLength?: T;
  status?: T;
  qualityRating?: T;
  actStructure?:
    | T
    | {
        actNumber?: T;
        description?: T;
        sceneCount?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "conversations_select".
 */
export interface ConversationsSelect<T extends boolean = true> {
  name?: T;
  project?: T;
  user?: T;
  messages?:
    | T
    | {
        id?: T;
        role?: T;
        content?: T;
        timestamp?: T;
        agentId?: T;
      };
  status?: T;
  lastMessageAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "workflows_select".
 */
export interface WorkflowsSelect<T extends boolean = true> {
  name?: T;
  project?: T;
  currentPhase?: T;
  qualityGates?:
    | T
    | {
        name?: T;
        threshold?: T;
        passed?: T;
        evaluatedAt?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activity-logs_select".
 */
export interface ActivityLogsSelect<T extends boolean = true> {
  project?: T;
  user?: T;
  action?: T;
  entityType?: T;
  entityId?: T;
  metadata?: T;
  timestamp?: T;
  ipAddress?: T;
  userAgent?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "export-jobs_select".
 */
export interface ExportJobsSelect<T extends boolean = true> {
  jobId?: T;
  project?: T;
  user?: T;
  videoId?: T;
  format?: T;
  quality?: T;
  resolution?: T;
  fps?: T;
  status?: T;
  progress?: T;
  outputUrl?: T;
  outputSize?: T;
  errorMessage?: T;
  options?: T;
  startedAt?: T;
  completedAt?: T;
  processingTime?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}